import "/path_utils.u"
import "/build_system.uh"

fn GetPackageInfo( BK::BuildSystemInterface &mut build_system_interface ) : BK::PackageInfo
{
	var BK::TargetTriple target_triple= build_system_interface.GetTargetTriple();

	var bool is_host_windows= ust::constexpr_string_equals( compiler::target::os, "windows" );
	var bool is_target_windows= target_triple.operating_system == "windows";

	var ust::filesystem_path mut sdl_install_prefix;

	auto mut sdl_install_prefix_opt= build_system_interface.GetConfigurationOption( "sdl_install_prefix" );
	if( !sdl_install_prefix_opt.empty() )
	{
		sdl_install_prefix= sdl_install_prefix_opt.try_take();
		build_system_interface.LogInfo( ust::concat( "\"sdl_install_prefix\" is \"", sdl_install_prefix, "\"" ) );
	}
	else
	{
		build_system_interface.LogInfo( "\"sdl_install_prefix\" is not specified, using default value" );
		sdl_install_prefix= ( is_host_windows ? ust::string_view8("") : ust::string_view8( "/usr" ) );
	}

	var BK::BuildTarget mut target
	{
		.target_type = BK::BuildTargetType::Executable,
		.name= "Nordsee",
		.source_files= ust::make_array</ ust::string8 />(
			"src/camera_controller.u",
			"src/fourier_transform.u",
			"src/main.u",
			"src/noise_heightmap.u",
			"src/text_printer.u",
			"src/waves_heightmap.u",
			"src/waves_heightmap_processor.u" ),
	};

	if( is_target_windows )
	{
		target.external_libraries.push_back(
			ust::path::join(
				sdl_install_prefix, "lib",
				( target_triple.architecture == "x86_64" ? "x64" : "x86" ),
				"SDL2.lib" ) );
	}
	else
	{
		target.external_libraries.push_back( "-lSDL2" );
	}

	auto build_system_executable_path= build_system_interface.GetBuildSystemExecutablePath();
	auto bin_path_opt= ust::path::get_parent_path( build_system_executable_path );

	var ust::filesystem_path sdl_header=
		( is_host_windows
			? ust::path::join( sdl_install_prefix, "include/SDL.h" )
			: ust::path::join( sdl_install_prefix, "include/SDL2/SDL.h" ) );

	var ust::filesystem_path sdl_header_converted_base_name= "SDL.uh";

	var ust::filesystem_path sdl_header_converted=
		ust::path::join(
			build_system_interface.GetCurrentPackageBuildTargetGeneratedSourcesDirectory( target.name ),
			sdl_header_converted_base_name );

	target.generated_private_header_files.push_back( sdl_header_converted_base_name );

	var ust::string8 cpp_header_converter_executable_name=
		ust::concat(
			"u.._cpp_header_converter",
			( is_host_windows ? ust::string_view8(".exe") : ust::string_view8("") ) );

	var ust::filesystem_path cpp_header_converter_path=
		ust::path::join(
			bin_path_opt.try_deref(), cpp_header_converter_executable_name );

	var BK::CustomBuildStep mut sdl_header_step
	{
		.command= BK::CustomBuildStep::ExeCommand
		{
			.exe_path= cpp_header_converter_path,
			.command_line= ust::make_array</ust::string8/>( sdl_header, "-o", sdl_header_converted, "--", "-std=c11" ),
		},
		.comment= sdl_header_converted_base_name,
		.input_files= ust::make_array( sdl_header ),
		.output_files= ust::make_array( sdl_header_converted ),
	};

	return BK::PackageInfo
	{
		.build_targets= ust::make_array( move(target) ),
		.custom_build_steps= ust::make_array( move(sdl_header_step) ),
	};
}
