import "waves_heightmap_processor.uh"
import "waves_heightmap.uh"

namespace NS
{

fn WavesHeightmapProcessor::constructor( u32 heightmap_size_log2 )
	(
		heightmap_size_log2_(heightmap_size_log2),
		waves_spectrum_= GenerateWavesSpectrum( heightmap_size_log2 ),
		fft_( size_type( heightmap_size_log2 ) )
	)
{
	var size_type heightmap_area= 1s << ( 2u * heightmap_size_log2 );

	waves_spectrum_time_evaluated_.resize( heightmap_area, Complexf::Zero() );
	side_shift_spectrum_x_.resize( heightmap_area, Complexf::Zero() );
	side_shift_spectrum_y_.resize( heightmap_area, Complexf::Zero() );

	intermediate_buffer_.resize( heightmap_area, Complexf::Zero() );

	vertical_shift_.resize( heightmap_area, 0.0f );
	side_shift_data_x_.resize( heightmap_area, 0.0f );
	side_shift_data_y_.resize( heightmap_area, 0.0f );
	heightmap_data_.resize( heightmap_area, 0.0f );

	color_data_.resize( heightmap_area, 0u );
}

fn WavesHeightmapProcessor::GetHeightmapSizeLog2( this ) : u32
{
	return heightmap_size_log2_;
}

fn WavesHeightmapProcessor::GetHeightmapData( this ) : ust::array_view_imut</f32/> @( return_inner_references )
{
	return heightmap_data_;
}

fn WavesHeightmapProcessor::GetColorData( this ) : ust::array_view_imut</Color32/> @( return_inner_references )
{
	return color_data_;
}

fn WavesHeightmapProcessor::GetCurrentSpectrum( this ) : ust::array_view_imut</Complexf/> @( return_inner_references )
{
	return waves_spectrum_time_evaluated_;
}

fn WavesHeightmapProcessor::Update(
	mut this,
	f32 time_delta_s,
	WavesHeightmapProcessorPerformanceCounters &mut performance_counters )
{
	accumulated_time_s_+= time_delta_s;

	performance_counters.spectrum_in_time_evaluation.RunWithMeasurement(
		lambda[&t= this]()
		{
			EvaluateWavesSpectrumInTime( t.heightmap_size_log2_, t.waves_spectrum_, t.waves_spectrum_time_evaluated_, t.accumulated_time_s_ );
		} );

	performance_counters.side_shift_spectrum_calculation.RunWithMeasurement(
		lambda[&t= this]()
		{
			GenerateSideShiftSpectra( t.heightmap_size_log2_, t.waves_spectrum_time_evaluated_, t.side_shift_spectrum_x_, t.side_shift_spectrum_y_ );
		} );

	performance_counters.heightmap_generation.RunWithMeasurement(
		lambda[&t= this]()
		{
			GenerateWavesHeightmap( t.heightmap_size_log2_, t.waves_spectrum_time_evaluated_, t.intermediate_buffer_, t.fft_, t.vertical_shift_ );
		} );

	performance_counters.heightmap_side_shifts_calculation.RunWithMeasurement(
		lambda[&t= this]()
		{
			GenerateWavesHeightmap( t.heightmap_size_log2_, t.side_shift_spectrum_x_, t.intermediate_buffer_, t.fft_, t.side_shift_data_x_ );
			GenerateWavesHeightmap( t.heightmap_size_log2_, t.side_shift_spectrum_y_, t.intermediate_buffer_, t.fft_, t.side_shift_data_y_ );
		} );

	performance_counters.heightmap_side_shifting.RunWithMeasurement(
		lambda[&t=this]()
		{
			GenerateShiftedHeightmap( t.heightmap_size_log2_, t.vertical_shift_, t.side_shift_data_x_, t.side_shift_data_y_, t.heightmap_data_ );
		} );

	performance_counters.colors_generation.RunWithMeasurement(
		lambda[&t= this]()
		{
			GenerateWavesColors( t.heightmap_size_log2_, t.heightmap_data_, t.color_data_ );
		} );
}

} // namespace NS
