import "/assert.u"
import "/scoped_array.u"
import "/vector.u"
import "/string_conversions.u"
import "fourier_transform.uh"
import "math_constants.uh"

namespace NS
{

fn Perform2DInverseCenteredFourierTransform(
	u32 size_log2,
	ust::array_view_imut</Complexf/> freqs,
	ust::array_view_mut</Complexf/> intermediate_buffer,
	ust::array_view_mut</f32/> out )
{
	var u32 size= 1u << size_log2;
	var u32 area= size * size;

	assert( freqs.size() == size_type(area) );
	assert( intermediate_buffer.size() == size_type(area) );
	assert( out.size() == size_type(area) );

	// Perform per-row inverse discrete Fourier transform.
	for( auto mut y= 0u; y < size; ++y )
	{
		for( auto mut x= 0u; x < size; ++ x )
		{
			var Complexf mut h= Complexf::Zero();
			var f32 scale= f32(x) * ( c_tau / f32(size) );
			for( auto mut k= 0u; k < size; ++k )
			{
				h+=
					freqs[ size_type( k | ( y << size_log2 ) ) ] *
					Complexf::ImaginaryExponent( f32( i32(k) - i32(size >> 1u) ) * scale );
			}

			intermediate_buffer[ size_type( x | ( y << size_log2 ) ) ]= h;
		}
	}

	// Perform per-column inverse discrete Fourier transform.
	for( auto mut x= 0u; x < size; ++x )
	{
		for( auto mut y= 0u; y < size; ++y )
		{
			var Complexf mut h= Complexf::Zero();
			var f32 scale= f32(y) * ( c_tau / f32(size) );
			for( auto mut k= 0u; k < size; ++k )
			{
				h+=
					intermediate_buffer[ size_type( x | ( k << size_log2 ) ) ] *
					Complexf::ImaginaryExponent( f32( i32(k) - i32(size >> 1u) ) * scale );
			}

			out[ size_type( x | (y << size_log2) ) ] = h.re;
		}
	}
}

fn PerformFast2DInverseCenteredFourierTransform(
	u32 size_log2,
	ust::array_view_imut</Complexf/> freqs,
	ust::array_view_mut</Complexf/> intermediate_buffer,
	ust::array_view_mut</f32/> out )
{
	/*
		TODO - optimize this:

		* Pre-calculate index bits reversing once, avoid doing this for each row/column.
		* Combine initial values reordering with the first 1-D FFT algorithm step.
		* Pre-calculate imaginary exponents once, in order to use them for transformation of each row/column.
		* For per-row transformation combine column-to-line transformation with indices reversing.
		* For the last transformation step (in per-column transformation) avoid calculating imaginary part, since only real part is used.
		* MOST IMPORTANT, do all changes above only if profiling shows that they have positive performance effect.
	*/

	var u32 size= 1u << size_log2;
	var u32 area= size * size;


	assert( freqs.size() == size_type(area) );
	assert( intermediate_buffer.size() == size_type(area) );
	assert( out.size() == size_type(area) );

	scoped_array u32 mut src_indices[ size_type( size ) ]( 0u );
	PrecalculateCenteredFFTIndicesPermutation( size_type( size_log2 ), src_indices );

	scoped_array Complexf mut complex_multipliers[ size_type(size) ]( Complexf::Zero() );
	PrecalculateCenteredFFTComplexMultipliers( size_type(size_log2), complex_multipliers );

	// Perform per-row inverse discrete Fourier transform.
	for( auto mut y= 0u; y < size; ++y )
	{
		var size_type start_index( y << size_log2 );
		var size_type end_index= start_index + size_type(size);

		PerformFastInverseCenteredFourierTransform(
			size_type(size_log2),
			freqs.subrange( start_index, end_index ),
			src_indices,
			complex_multipliers,
			intermediate_buffer.subrange( start_index, end_index ) );
	}

	scoped_array Complexf mut temp_line[ size_type(size) ]( Complexf::Zero() );
	scoped_array Complexf mut temp_line2[ size_type(size) ]( Complexf::Zero() );

	// Perform per-column inverse discrete Fourier transform.
	// TODO - optimize this - avoid using second intermediate buffer.
	for( auto mut x= 0u; x < size; ++x )
	{
		for( auto mut y= 0u; y < size; ++y )
		{
			temp_line[ size_type(y) ]= intermediate_buffer[ size_type( x | ( y << size_log2 ) ) ];
		}

		PerformFastInverseCenteredFourierTransform(
			size_type(size_log2),
			temp_line,
			src_indices,
			complex_multipliers,
			temp_line2 );

		for( auto mut y= 0u; y < size; ++y )
		{
			out[ size_type( x | (y << size_log2) ) ] = temp_line2[ size_type(y) ].re;
		}
	}
}

fn PrecalculateCenteredFFTIndicesPermutation( size_type size_log2, ust::array_view_mut</u32/> out )
{
	var size_type size= 1s << size_log2;
	var size_type half_size= size >> 1s;

	for( auto mut i= 0s; i < size; ++i )
	{
		// Change bits order in the index.
		auto mut src_index= 0s;
		for( var size_type mut b= 0s; b < size_log2; ++b )
		{
			var size_type bit_value= (i >> (size_log2 - 1s - b)) & 1s;
			src_index |= bit_value << b;
		}

		// Perform shift for centered.
		// TODO - improve this, perform shifted complex exponents calculation instead.
		if( src_index < half_size )
		{
			src_index += half_size;
		}
		else
		{
			src_index-= half_size;
		}

		out[i]= u32(src_index);
	}
}

fn PrecalculateCenteredFFTComplexMultipliers( size_type size_log2, ust::array_view_mut</Complexf/> out )
{
	var size_type mut dst= 0s;
	for( var size_type mut s= 0s; s < size_log2; ++s )
	{
		var size_type half_m= 1s << s;
		var size_type m= 1s << ( s + 1s );

		for( var size_type mut j= 0s; j < half_m; ++j )
		{
			var Complexf omega= Complexf::ImaginaryExponent( f32(j) * (c_tau / f32(m)) );
			out[dst]= omega;
			++dst;
		}
	}
}

fn PerformFastInverseCenteredFourierTransform(
	size_type size_log2,
	ust::array_view_imut</Complexf/> in,
	ust::array_view_imut</u32/> src_indices,
	ust::array_view_imut</Complexf/> complex_multipliers,
	ust::array_view_mut</Complexf/> out )
{
	assert( in.size() > 0s );
	assert( in.size() == ( 1s << size_log2 ) );
	assert( in.size() == out.size() );
	assert( in.size() == src_indices.size() );

	for( auto mut i= 0s; i < in.size(); ++i )
	{
		out[i]= in[ size_type(src_indices[i]) ];
	}

	var size_type mut omega_index= 0s;
	for( var size_type mut s= 0s; s < size_log2; ++s )
	{
		var size_type half_m= 1s << s;
		var size_type m= 1s << ( s + 1s );

		for( var size_type mut j= 0s; j < half_m; ++j )
		{
			var Complexf& omega= complex_multipliers[omega_index];
			++omega_index;
			for( var size_type mut k= 0s; k < in.size(); k+= m )
			{
				var size_type index0= j + k;
				var size_type index1= j + k + half_m;

				auto val0= out[index0];
				auto val1= out[index1] * omega;

				out[index0]= val0 + val1;
				out[index1]= val0 - val1;
			}
		}
	}
}

} // namespace NS
