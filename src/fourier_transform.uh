import "/random_access_range.u"
import "/vector.u"
import "complex.uh"

namespace NS
{

// Perform inverse centered Fourier transform of an 2D image in frequency domian of size ( 1 << size_log2 ) x ( 1 << size_log2 ).
// It's expected that zero frequency is located at the center,
// the first half of the image represents negative frequences and the second half represents positive frequencies.
// Writes result into output buffer, but only real parts.
// Uses intermediate buffer internally.
// Buffers size should be equal to image area.
// It's generally slow for large images.
fn Perform2DInverseCenteredFourierTransform(
	u32 size_log2,
	ust::array_view_imut</Complexf/> freqs,
	ust::array_view_mut</Complexf/> intermediate_buffer,
	ust::array_view_mut</f32/> out );

// The same as 2D inverse Fourier transform, but much faster.
// Should produce roughly the same results.
fn PerformFast2DInverseCenteredFourierTransform(
	u32 size_log2,
	ust::array_view_imut</Complexf/> freqs,
	ust::array_view_mut</Complexf/> intermediate_buffer,
	InverseCenteredFFT& fft,
	ust::array_view_mut</f32/> out );

class InverseCenteredFFT
{
public:
	fn constructor( size_type size_log2 );

	fn Calculate( this, ust::array_view_imut</Complexf/> in, ust::array_view_mut</Complexf/> out );

private:
	fn CalculateSrcIndices( size_type size_log2 ) : ust::vector</u32/>;
	fn CalculateComplexMultipliers( size_type size_log2 ) : ust::vector</Complexf/>;

private:
	size_type imut size_log2_;
	ust::vector</u32/> imut src_indices_;
	ust::vector</Complexf/> imut complex_multipliers_;
}

} // namespace NS
