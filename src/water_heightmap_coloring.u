import "/math.u"
import "/minmax.u"
import "vec.uh"
import "water_heightmap_coloring.uh"

namespace NS
{

fn GenerateWaterHeightmapColors(
	u32 heightmap_size_log2,
	ust::array_view_imut</f32/> heightmap_data,
	ust::array_view_mut</Color32/> out_colors )
{
	var u32 heightmap_size= 1u << heightmap_size_log2;
	var u32 heightmap_size_mask= heightmap_size - 1u;

	var [ f32, 3 ] sun_dir[ 0.7f, 0.3f, 0.6f ];
	var f32 sun_dir_squared = sun_dir[0] * sun_dir[0] + sun_dir[1] * sun_dir[1] + sun_dir[2] * sun_dir[2];

	var Vec3f base_water_color( 68.0f, 129.0f, 179.0f );

	var Vec3f sun_light_color( 0.6f, 0.6f, 0.5f );
	var Vec3f sky_light_color( 0.4f, 0.4f, 0.5f );

	for( auto mut y= 0u; y < heightmap_size; ++y )
	{
		for( auto mut x= 0u; x < heightmap_size; ++x )
		{
			var [ [ f32, 3 ], 3 ] mut adjacent_cells = zero_init;
			for(var i32 mut dx = 0; dx < 3; ++dx)
			{
				for(var i32 mut dy = 0; dy < 3; ++dy)
				{
					var u32 address =
						u32((i32(x) + dx - 1) & i32(heightmap_size_mask)) +
						u32(((i32(y) + dy - 1) & i32(heightmap_size_mask)) << heightmap_size_log2);
					adjacent_cells[u32(dx)][u32(dy)] = heightmap_data[size_type(address)];
				}
			}

			var f32 dh_dx =
				(adjacent_cells[2][0] + adjacent_cells[2][1] + adjacent_cells[2][2]) -
				(adjacent_cells[0][0] + adjacent_cells[0][1] + adjacent_cells[0][2]);

			var f32 dh_dy =
				(adjacent_cells[0][2] + adjacent_cells[1][2] + adjacent_cells[2][2]) -
				(adjacent_cells[0][0] + adjacent_cells[1][0] + adjacent_cells[2][0]);

			var [ f32, 3 ] normal[ -dh_dx, -dh_dy, 3.0f ];

			var f32 angle_cos =
				(normal[0] * sun_dir[0] + normal[1] * sun_dir[1] + normal[2] * sun_dir[2]) /
				ust::sqrt((normal[0] * normal[0] + normal[1] * normal[1] + normal[2] * normal[2]) * sun_dir_squared);

			var f32 mut sub_dir_dot_clampled = ust::max(0.0f, angle_cos);


			var Vec3f light_sum= sun_light_color * sub_dir_dot_clampled + sky_light_color;
			var Vec3f result_color= base_water_color * light_sum;

			var u32 address = x + (y << heightmap_size_log2);

			out_colors[ size_type(address) ] =
				Color32(
					u32( ust::max( 0.0f, ust::min( result_color.z, 255.0f ) ) ) |
					( u32( ust::max( 0.0f, ust::min( result_color.y, 255.0f ) ) ) << 8u) |
					( u32( ust::max( 0.0f, ust::min( result_color.x, 255.0f ) ) ) << 16u) );

		}
	}
}

} // namespace NS
