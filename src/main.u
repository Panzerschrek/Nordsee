import "/main_wrapper.u"
import "/math.u"
import "/stdout.u"
import "/vector.u"
import "/Nordsee/SDL.uh"
import "camera_controller.uh"
import "drawable_surface.uh"
import "noise_heightmap.uh"
import "text_printer.uh"
import "waves_heightmap.uh"


pretty_main
{
	// Place actual main inside our "NS" namespace.
	return NS::Main();
}

namespace NS
{

fn Main() : i32
{
	ust::stdout_print( "Nordsee\n" );

	var u32 heightmap_size_log2= 7u;

	var ust::vector</f32/> heightmap_data= GenerateWavesHeightmap( heightmap_size_log2 );
	var ust::vector</Color32/> color_data= GenerateWavesColors( heightmap_size_log2, heightmap_data );

	unsafe( SDL_Init( SDL_INIT_VIDEO ) );

	auto SDL_WINDOWPOS_CENTERED= 0x2FFF0000;

	var u32 window_width= 1024u, window_height= 768u;

	var $(SDL_Window_) window=
		unsafe( SDL_CreateWindow(
			$<( cast_mut( "Nordsee\0"[0] ) ),
			SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,
			i32(window_width), i32(window_height),
			0u ) );

	if( ust::is_nullptr( window ) )
	{
		ust::stderr_print( "Failed to create window!\n" );
		return -1;
	}

	var $(SDL_Surface) surface_ptr= unsafe( SDL_GetWindowSurface( window ) );

	if( ust::is_nullptr(surface_ptr) ||
		ust::is_nullptr( unsafe( $>(surface_ptr).format ) ) ||
		i32( unsafe( $>( $>(surface_ptr).format ) ).BytesPerPixel ) != 4 )
	{
		ust::stderr_print( "Invalid window surface!\n" );
		return -1;
	}

	var u64 mut prev_tick= unsafe( SDL_GetPerformanceCounter() );
	var f64 performace_counter_frequency( unsafe( SDL_GetPerformanceFrequency() ) );

	var ust::vector</bool/> mut keyboard_state;
	var CameraController mut camera_controller( Vec3f( 0.0f, 0.0f, 180.0f ) );

	loop label main_loop
	{
		var u64 cur_tick = unsafe( SDL_GetPerformanceCounter() );
		var f32 time_delta_s( ust::min( f64(cur_tick - prev_tick) / performace_counter_frequency, 0.5 ) );
		prev_tick= cur_tick;

		var SDL_Event mut event= zero_init;
		while( unsafe( SDL_PollEvent( $<(event) ) ) != 0 )
		{
			var SDL_EventType t( i64( event.union_contents[0] ) );
			if( t == SDL_QUIT )
			{
				break label main_loop;
			}
			if( t == SDL_WINDOWEVENT )
			{
				auto& windows_event= unsafe( cast_ref_unsafe</SDL_WindowEvent/>( event ) );
				if( SDL_WindowEventID( windows_event.event ) == SDL_WINDOWEVENT_CLOSE )
				{
					break label main_loop;
				}
			}
			if( t == SDL_KEYDOWN )
			{
				auto& keyboard_event= unsafe( cast_ref_unsafe</SDL_KeyboardEvent/>( event ) );
				if( keyboard_event.keysym.scancode == SDL_SCANCODE_ESCAPE )
				{
					break label main_loop;
				}
			}
		}

		{
			var i32 mut key_count= 0;
			var $(Uint8) keyboard_state_raw= unsafe( SDL_GetKeyboardState( $<( key_count ) ) );

			keyboard_state.resize( size_type( key_count ), false );

			for( auto mut i= 0s; i < size_type(key_count); ++i )
			{
				keyboard_state[i]= unsafe( $>( keyboard_state_raw + i ) ) != Uint8(0);
			}
		}

		camera_controller.Update( time_delta_s, keyboard_state );

		var SDL_Surface& surface= unsafe( $>(surface_ptr) );

		var bool must_lock_surface= ( surface.flags & u32(SDL_RLEACCEL) ) != 0u;

		if( must_lock_surface )
		{
			unsafe( SDL_LockSurface( surface_ptr ) );
		}

		var u32 pitch= u32( surface.pitch ) / u32( typeinfo</Color32/>.size_of );

		var DrawableSurface drawable_surface
		{
			.w( surface.w ),
			.h( surface.h ),
			.pitch= pitch,
			.data= unsafe( ust::array_view_mut</Color32/>(
				ust::byte_ptr_cast</Color32/>( surface.pixels ),
				size_type( pitch * u32(surface.h) ) ) ),
		};

		DrawHeightmap(
			heightmap_size_log2,
			heightmap_data,
			color_data,
			camera_controller,
			drawable_surface );

		DrawText( drawable_surface, "some", 10, 30, 0x00FF00FFu, 2u );

		if( must_lock_surface )
		{
			unsafe( SDL_UnlockSurface( surface_ptr ) );
		}

		unsafe( SDL_UpdateWindowSurface( window ) );
	}

	unsafe( SDL_DestroyWindow( window ) );

	unsafe( SDL_Quit() );

	return 0;
}

fn DrawHeightmap(
	u32 heightmap_size_log2,
	ust::array_view_imut</f32/> heightmap_data,
	ust::array_view_imut</Color32/> color_data,
	CameraController& camera_controller,
	DrawableSurface& surface )
{
	var u32 heightmap_size = 1u << heightmap_size_log2;
	var u32 heightmap_size_mask= heightmap_size - 1u;

	var f32 max_depth = f32(heightmap_size) * 2.0f;

	var Color32 c_sky_color= 255u | (225u << 8u) | (215u << 16u);

	var Vec3f cam_pos= camera_controller.GetPos();
	var f32 additional_y_shift = -ust::tan( camera_controller.GetElevation() );

	var f32 screen_scale = 0.5f * f32(ust::max(surface.w, surface.h));

	var f32 cam_angle = camera_controller.GetAzimuth();
	var f32 ray_rotate_cos = ust::cos(cam_angle);
	var f32 ray_rotate_sin = ust::sin(cam_angle);

	// Process columns.
	for( var u32 mut column= 0u; column < u32( surface.w ); ++column )
	{
		var f32 ray_side_offset = (f32(surface.w) * 0.5f - f32(column)) / screen_scale;

		auto dst_column= surface.data.subrange_start( size_type(column) );

		var i32 mut prev_row( surface.h );

		for( var f32 mut depth= 2.0f; depth < max_depth; depth *= 1.004f )
		{
			var Vec2f ray_vec( depth, ray_side_offset * depth );
			var Vec2f ray_vec_rotated(
				ray_vec.x * ray_rotate_cos - ray_vec.y * ray_rotate_sin,
				ray_vec.y * ray_rotate_cos + ray_vec.x * ray_rotate_sin );
			var Vec2f terrain_pos= ray_vec_rotated + Vec2f( cam_pos.x, cam_pos.y );

			var u32 address =
				u32(i32(ust::floor(terrain_pos.x)) & i32(heightmap_size_mask)) +
				u32((i32(ust::floor(terrain_pos.y)) & i32(heightmap_size_mask)) << heightmap_size_log2);

			var f32 height = heightmap_data[size_type(address)];

			var f32 screen_row = (height - cam_pos.z) / depth;
			var i32 row(((1.0f - additional_y_shift) - screen_row) * screen_scale);

			if(row >= prev_row)
			{
				continue;
			}

			var Color32 color= color_data[size_type(address)];

			var i32 min_row= ust::max(row, 0);
			for( var i32 mut dst_row = prev_row - 1; dst_row >= min_row; --dst_row)
			{
				dst_column[ size_type( u32(dst_row) * surface.pitch ) ]= color;
			}

			prev_row = min_row;
		}

		// Fill remaining sky with fog.
		for(var i32 mut dst_row = prev_row - 1; dst_row >= 0; --dst_row)
		{
			dst_column[ size_type( u32(dst_row) * surface.pitch ) ]= c_sky_color;
		}
	}
}

} // namespace NS
