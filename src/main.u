import "/main_wrapper.u"
import "/stdout.u"
import "/Nordsee/SDL.uh"
import "camera_controller.uh"
import "debug_drawing.uh"
import "heightmap_drawing.uh"
import "waves_heightmap_processor.uh"


pretty_main
{
	// Place actual main inside our "NS" namespace.
	return NS::Main();
}

namespace NS
{

fn Main() : i32
{
	ust::stdout_print( "Nordsee\n" );

	var WavesHeightmapProcessor mut waves_heightmap_processor( 9u );

	unsafe( SDL_Init( SDL_INIT_VIDEO ) );

	auto SDL_WINDOWPOS_CENTERED= 0x2FFF0000;

	var u32 window_width= 1024u, window_height= 768u;

	var $(SDL_Window_) window=
		unsafe( SDL_CreateWindow(
			$<( cast_mut( "Nordsee\0"[0] ) ),
			SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,
			i32(window_width), i32(window_height),
			0u ) );

	if( ust::is_nullptr( window ) )
	{
		ust::stderr_print( "Failed to create window!\n" );
		return -1;
	}

	var $(SDL_Surface) surface_ptr= unsafe( SDL_GetWindowSurface( window ) );

	if( ust::is_nullptr(surface_ptr) ||
		ust::is_nullptr( unsafe( $>(surface_ptr).format ) ) ||
		i32( unsafe( $>( $>(surface_ptr).format ) ).BytesPerPixel ) != 4 )
	{
		ust::stderr_print( "Invalid window surface!\n" );
		return -1;
	}

	var bool mut draw_performance_counters= false;

	var PerformanceCounter mut frame_time_performance_counter;
	var PerformanceCounters mut performance_counters;

	auto mut prev_tick= frame_time_performance_counter.GetCurrentTime();

	var ust::vector</bool/> mut keyboard_state;
	var CameraController mut camera_controller( Vec3f( 0.0f, 0.0f, 20.0f ) );

	loop label main_loop
	{
		auto cur_tick = frame_time_performance_counter.GetCurrentTime();
		var f32 time_delta_s= ust::min( frame_time_performance_counter.CalculateDurationS( prev_tick, cur_tick ), 0.5f );
		frame_time_performance_counter.AddMeasurement( prev_tick, cur_tick );
		prev_tick= cur_tick;

		var SDL_Event mut event= zero_init;
		while( unsafe( SDL_PollEvent( $<(event) ) ) != 0 )
		{
			var SDL_EventType t( i64( event.union_contents[0] ) );
			if( t == SDL_QUIT )
			{
				break label main_loop;
			}
			if( t == SDL_WINDOWEVENT )
			{
				auto& windows_event= unsafe( cast_ref_unsafe</SDL_WindowEvent/>( event ) );
				if( SDL_WindowEventID( windows_event.event ) == SDL_WINDOWEVENT_CLOSE )
				{
					break label main_loop;
				}
			}
			if( t == SDL_KEYDOWN )
			{
				auto& keyboard_event= unsafe( cast_ref_unsafe</SDL_KeyboardEvent/>( event ) );
				if( keyboard_event.keysym.scancode == SDL_SCANCODE_ESCAPE )
				{
					break label main_loop;
				}
				if( keyboard_event.keysym.scancode == SDL_SCANCODE_Z )
				{
					draw_performance_counters= !draw_performance_counters;
				}
			}
		}

		{
			var i32 mut key_count= 0;
			var $(Uint8) keyboard_state_raw= unsafe( SDL_GetKeyboardState( $<( key_count ) ) );

			keyboard_state.resize( size_type( key_count ), false );

			for( auto mut i= 0s; i < size_type(key_count); ++i )
			{
				keyboard_state[i]= unsafe( $>( keyboard_state_raw + i ) ) != Uint8(0);
			}
		}

		camera_controller.Update( time_delta_s, keyboard_state );

		{
			auto &mut sub_countrers= performance_counters.waves_heightmap_processor;
			performance_counters.total_heightmap_generation.RunWithMeasurement(
				lambda[&]()
				{
					waves_heightmap_processor.Update( time_delta_s, sub_countrers );
				} );
		}

		var SDL_Surface& surface= unsafe( $>(surface_ptr) );

		var bool must_lock_surface= ( surface.flags & u32(SDL_RLEACCEL) ) != 0u;

		if( must_lock_surface )
		{
			unsafe( SDL_LockSurface( surface_ptr ) );
		}

		var u32 pitch= u32( surface.pitch ) / u32( typeinfo</Color32/>.size_of );

		var DrawableSurface drawable_surface
		{
			.w( surface.w ),
			.h( surface.h ),
			.pitch= pitch,
			.data= unsafe( ust::array_view_mut</Color32/>(
				ust::byte_ptr_cast</Color32/>( surface.pixels ),
				size_type( pitch * u32(surface.h) ) ) ),
		};

		performance_counters.heightmap_rendering.RunWithMeasurement(
			lambda[&]()
			{
				DrawHeightmap(
					waves_heightmap_processor.GetHeightmapSizeLog2(),
					waves_heightmap_processor.GetHeightmapData(),
					waves_heightmap_processor.GetColorData(),
					camera_controller,
					drawable_surface );
			} );

		if( false )
		{
			DebugDrawHeightmap(
				waves_heightmap_processor.GetHeightmapSizeLog2(),
				waves_heightmap_processor.GetHeightmapData(),
				drawable_surface );
		}
		if( false )
		{
			DebugDrawSpectrum(
				waves_heightmap_processor.GetHeightmapSizeLog2(),
				waves_heightmap_processor.GetCurrentSpectrum(),
				drawable_surface );
		}

		DrawFPS( drawable_surface, frame_time_performance_counter.GetAverageDurationS() );

		if( draw_performance_counters )
		{
			DrawPerformanceCounters( drawable_surface, performance_counters );
		}

		if( must_lock_surface )
		{
			unsafe( SDL_UnlockSurface( surface_ptr ) );
		}

		unsafe( SDL_UpdateWindowSurface( window ) );
	}

	unsafe( SDL_DestroyWindow( window ) );

	unsafe( SDL_Quit() );

	return 0;
}

} // namespace NS
