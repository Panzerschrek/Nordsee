import "/vector.u"
import "color.uh"
import "complex.uh"
import "fourier_transform.uh"
import "performance_counters.uh"

namespace NS
{

class WavesHeightmapProcessor
{
public:
	fn constructor( u32 heightmap_size_log2 );

	fn GetHeightmapSizeLog2( this ) : u32;
	fn GetHeightmapData( this ) : ust::array_view_imut</f32/> @( return_inner_references );
	fn GetColorData( this ) : ust::array_view_imut</Color32/> @( return_inner_references );
	fn GetCurrentSpectrum( this ) : ust::array_view_imut</Complexf/> @( return_inner_references );

	fn Update(
		mut this,
		f32 time_delta_s,
		WavesHeightmapProcessorPerformanceCounters &mut performance_counters );

private:
	auto return_inner_references= ust::reference_notation::return_inner_references::param0;

private:
	u32 imut heightmap_size_log2_;
	ust::vector</Complexf/> imut waves_spectrum_;

	InverseCenteredFFT imut fft_;

	f32 accumulated_time_s_= 0.0f;

	ust::vector</Complexf/> waves_spectrum_time_evaluated_;
	ust::vector</Complexf/> side_shift_spectrum_x_;
	ust::vector</Complexf/> side_shift_spectrum_y_;

	ust::vector</Complexf/> intermediate_buffer_;

	ust::vector</f32/> heightmap_data_;
	ust::vector</f32/> side_shift_data_x_;
	ust::vector</f32/> side_shift_data_y_;

	ust::vector</Color32/> color_data_;
}

} // namespace NS
